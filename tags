!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_SIZE	arena.h	7;"	d
ARENA_H	arena.h	2;"	d
BBLK	colors.h	29;"	d
BBLU	colors.h	33;"	d
BCYN	colors.h	35;"	d
BGRN	colors.h	31;"	d
BHBLK	colors.h	79;"	d
BHBLU	colors.h	83;"	d
BHCYN	colors.h	85;"	d
BHGRN	colors.h	81;"	d
BHMAG	colors.h	84;"	d
BHRED	colors.h	80;"	d
BHWHT	colors.h	86;"	d
BHYEL	colors.h	82;"	d
BLK	colors.h	19;"	d
BLKB	colors.h	49;"	d
BLKHB	colors.h	59;"	d
BLU	colors.h	23;"	d
BLUB	colors.h	53;"	d
BLUHB	colors.h	63;"	d
BMAG	colors.h	34;"	d
BRED	colors.h	30;"	d
BUFFER_SIZE	libft.h	17;"	d
BWHT	colors.h	36;"	d
BYEL	colors.h	32;"	d
CC	Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -Wextra $(DEBUG)$/;"	m
COLORS_H	colors.h	14;"	d
COLOR_RESET	colors.h	91;"	d
CRESET	colors.h	90;"	d
CYN	colors.h	25;"	d
CYNB	colors.h	55;"	d
CYNHB	colors.h	65;"	d
DA_INIT_SIZE	libft.h	41;"	d
DEBUG	Makefile	/^DEBUG = -g$/;"	m
ERR	libft.h	39;"	d
FALSE	libft.h	36;"	d
FT_FPRINTF_H	ft_fprintf.h	14;"	d
FT_FPRINTF_H	ft_fprintf_utils/ft_fprintf.h	14;"	d
GRN	colors.h	21;"	d
GRNB	colors.h	51;"	d
GRNHB	colors.h	61;"	d
HBLK	colors.h	69;"	d
HBLU	colors.h	73;"	d
HCYN	colors.h	75;"	d
HEADER	Makefile	/^HEADER = libft.h$/;"	m
HGRN	colors.h	71;"	d
HMAG	colors.h	74;"	d
HRED	colors.h	70;"	d
HWHT	colors.h	76;"	d
HYEL	colors.h	72;"	d
IN	libft.h	38;"	d
LIBFT_H	libft.h	14;"	d
MAG	colors.h	24;"	d
MAGB	colors.h	54;"	d
MAGHB	colors.h	64;"	d
NAME	Makefile	/^NAME = libft.a$/;"	m
NO	libft.h	35;"	d
OBJECTS	Makefile	/^OBJECTS = $(SOURCES:.c=.o)$/;"	m
OUT	libft.h	37;"	d
RED	colors.h	20;"	d
REDB	colors.h	50;"	d
REDHB	colors.h	60;"	d
RESET	colors.h	89;"	d
SOURCES	Makefile	/^SOURCES = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c ft_strlen.c ft_isspace.c \\$/;"	m
TRUE	libft.h	34;"	d
UBLK	colors.h	39;"	d
UBLU	colors.h	43;"	d
UCYN	colors.h	45;"	d
UGRN	colors.h	41;"	d
UMAG	colors.h	44;"	d
URED	colors.h	40;"	d
UWHT	colors.h	46;"	d
UYEL	colors.h	42;"	d
WHT	colors.h	26;"	d
WHTB	colors.h	56;"	d
WHTHB	colors.h	66;"	d
YEL	colors.h	22;"	d
YELB	colors.h	52;"	d
YELHB	colors.h	62;"	d
YES	libft.h	33;"	d
arena_alloc	arena.c	/^void	*arena_alloc(t_arena **region, size_t nbytes, size_t size)$/;"	f
arena_destroy	arena.c	/^void arena_destroy(t_arena *arena)$/;"	f
arena_init	arena.c	/^t_arena *arena_init(size_t size)$/;"	f
arena_visualizer	arena.c	/^void arena_visualizer(t_arena *region) $/;"	f
capacity	libft.h	/^	size_t capacity;$/;"	m	struct:s_dynamic_array
cnt	libft.h	/^	size_t cnt;$/;"	m	struct:s_dynamic_array
content	libft.h	/^	void			*content;$/;"	m	struct:s_list
cstr_to_str	safe_strings.c	/^t_string cstr_to_str(char *raw_str)$/;"	f
cstr_to_str_ptr	safe_strings.c	/^t_string cstr_to_str_ptr(char *raw_str, size_t size)$/;"	f
current_size	arena.h	/^	size_t current_size;$/;"	m	struct:s_arena
da_append	dynamic_array.c	/^void da_append(t_da *da, const void *insertion)$/;"	f
da_free	dynamic_array.c	/^void da_free(t_da *da)$/;"	f
da_init	dynamic_array.c	/^t_da *da_init(size_t ds)$/;"	f
data	libft.h	/^	void *data;$/;"	m	struct:s_dynamic_array
data_size	libft.h	/^	size_t data_size;$/;"	m	struct:s_dynamic_array
digit_count	ft_itoa.c	/^static int	digit_count(long int n)$/;"	f	file:
end	arena.h	/^	void	*end;$/;"	m	struct:s_arena
end	libft.h	/^	char *end;$/;"	m	struct:s_string
freen	freen.c	/^void freen(void *data)$/;"	f
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atoi_base	ft_atoi_base.c	/^int	ft_atoi_base(const char *nptr, const char *base_str)$/;"	f
ft_atoi_long	ft_atoi_long.c	/^long	ft_atoi_long(const char *nptr)$/;"	f
ft_base_char	ft_fprintf_utils/ft_tohexa.c	/^static char	ft_base_char(char to_format, unsigned long n)$/;"	f	file:
ft_base_char	ft_tohexa.c	/^static char	ft_base_char(char to_format, unsigned long n)$/;"	f	file:
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_digit_count	ft_digit_count.c	/^int	ft_digit_count(long int n, int divisor)$/;"	f
ft_fprintf	ft_fprintf.c	/^int	ft_fprintf(int fd, const char *str, ...)$/;"	f
ft_getc	ft_getc.c	/^int	ft_getc(int fd)$/;"	f
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del) (void *))$/;"	f
ft_lstdelone	ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del) (void *))$/;"	f
ft_lstiter	ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f) (void *))$/;"	f
ft_lstlast	ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del) (void *))$/;"	f
ft_lstnew	ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew_safe	ft_lstmap.c	/^static t_list	*ft_lstnew_safe(void *content)$/;"	f	file:
ft_lstsize	ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_printmemory	ft_fprintf_utils/ft_printmemory.c	/^int	ft_printmemory(int fd, unsigned long n)$/;"	f
ft_printmemory	ft_printmemory.c	/^int	ft_printmemory(int fd, unsigned long n)$/;"	f
ft_putchar_fd	ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbru_fd	ft_fprintf_utils/ft_putnbru_fd.c	/^int	ft_putnbru_fd(unsigned int n, int fd)$/;"	f
ft_putnbru_fd	ft_putnbru_fd.c	/^int	ft_putnbru_fd(unsigned int n, int fd)$/;"	f
ft_putns	ft_putns.c	/^void	ft_putns(char *s, int n)$/;"	f
ft_puts	ft_puts.c	/^void	ft_puts(char *s)$/;"	f
ft_putstr_fd	ft_putstr_fd.c	/^int ft_putstr_fd(char *s, int fd)$/;"	f
ft_realloc	ft_realloc.c	/^void *ft_realloc(void *data, size_t data_size)$/;"	f
ft_split	ft_split.c	/^char	**ft_split(char const *s, char *delimiter)$/;"	f
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_striteri	ft_striteri.c	/^void	ft_striteri(char *s, void (*f) (unsigned int, char*))$/;"	f
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_until	ft_strjoin_until.c	/^char	*ft_strjoin_until(char const *s1, char const *s2, char target)$/;"	f
ft_strlcat	ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f) (unsigned int, char))$/;"	f
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strndup	ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f
ft_strnstr	ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t n)$/;"	f
ft_strrchr	ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tohexa	ft_fprintf_utils/ft_tohexa.c	/^int	ft_tohexa(int fd, char to_format, unsigned long n)$/;"	f
ft_tohexa	ft_tohexa.c	/^int	ft_tohexa(int fd, char to_format, unsigned long n)$/;"	f
ft_tolower	ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_len	ft_strtrim.c	/^static int	get_len(char const *s, char const *set)$/;"	f	file:
get_len	ft_substr.c	/^static int	get_len(char const *s, unsigned int start, size_t len)$/;"	f	file:
get_next_line	get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
handle_zero	ft_itoa.c	/^static char	*handle_zero(char *p)$/;"	f	file:
init	get_next_line.c	/^static void init(t_line **line)$/;"	f	file:
is_base	ft_atoi_base.c	/^static int	is_base(char c, int base, const char *base_str, int *value)$/;"	f	file:
is_charset	ft_strtrim.c	/^static int	is_charset(char const c, char const *set)$/;"	f	file:
is_delimiter	ft_split.c	/^static int	is_delimiter(char c, char *delimiter)$/;"	f	file:
len	libft.h	/^	size_t len;$/;"	m	struct:s_string
limit	arena.h	/^	size_t limit;$/;"	m	struct:s_arena
main	safe_strings.c	/^int main(void)$/;"	f
memory	arena.h	/^	void	*memory;$/;"	m	struct:s_arena
new	get_next_line.c	/^	char *new;$/;"	m	struct:s_line_str	file:
new_str	safe_strings.c	/^t_string	new_str(char *s)$/;"	f
next	arena.h	/^	struct s_arena *next;$/;"	m	struct:s_arena	typeref:struct:s_arena::s_arena
next	libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
nl	get_next_line.c	/^	bool nl;$/;"	m	struct:s_line_str	file:
old	get_next_line.c	/^	char *old;$/;"	m	struct:s_line_str	file:
print_bits	print_bits.c	/^void	print_bits(char c, int fd)$/;"	f
print_fmt	ft_fprintf.c	/^static int	print_fmt(int fd, char fmt, va_list al)$/;"	f	file:
putnbr	ft_itoa.c	/^static char	*putnbr(long int n, char *ptr, int len)$/;"	f	file:
res	get_next_line.c	/^static char *res(t_line *line)$/;"	f	file:
s	libft.h	/^	char *s;$/;"	m	struct:s_string
s_arena	arena.h	/^typedef struct s_arena {$/;"	s
s_dynamic_array	libft.h	/^typedef struct s_dynamic_array$/;"	s
s_line_str	get_next_line.c	/^typedef struct s_line_str$/;"	s	file:
s_list	libft.h	/^typedef struct s_list$/;"	s
s_string	libft.h	/^typedef struct s_string$/;"	s
string_find	safe_strings.c	/^int string_find(t_string str, size_t index, size_t n, t_string delimiters)$/;"	f
string_put	safe_strings.c	/^int string_put(t_string s, int fd)$/;"	f
string_split	safe_strings.c	/^t_string *string_split(t_string str, t_string delimiters)$/;"	f
t_arena	arena.h	/^} t_arena;$/;"	t	typeref:struct:s_arena
t_da	libft.h	/^}	t_da;$/;"	t	typeref:struct:s_dynamic_array
t_line	get_next_line.c	/^}	t_line;$/;"	t	typeref:struct:s_line_str	file:
t_list	libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_string	libft.h	/^} t_string;$/;"	t	typeref:struct:s_string
word_count	ft_split.c	/^int	word_count(char const *s, char *delimiter)$/;"	f
